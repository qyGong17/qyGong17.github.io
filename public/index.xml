<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>QY&#39;s Notes</title>
    <link>qygong17.github.io/</link>
    <description>Recent content on QY&#39;s Notes</description>
    <image>
      <title>QY&#39;s Notes</title>
      <url>qygong17.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>qygong17.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 22 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="qygong17.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Notes on The Collector’s Fallacy</title>
      <link>qygong17.github.io/posts/notes-on-the-collectors-fallacy/</link>
      <pubDate>Mon, 22 May 2023 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/posts/notes-on-the-collectors-fallacy/</guid>
      <description>Notes on: The Collector’s Fallacy • Zettelkasten Method
Collector&amp;rsquo;s Fallacy Hoarding information, such as making copies and bookmarking webpages, can be addictive, because we have instant feedback: we did something, and the collection volumn increases.
However, apart from the plies of collection, actually we haven&amp;rsquo;t learned a thing.
What to do instead We need to assimilate the information and increase our own knowledge, and one of the first steps is to take notes.</description>
    </item>
    
    <item>
      <title>Obsidian Plugin-local images plus</title>
      <link>qygong17.github.io/posts/obsidian-plugin-local-images-plus/</link>
      <pubDate>Mon, 22 May 2023 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/posts/obsidian-plugin-local-images-plus/</guid>
      <description>My Online Storage Service (OSS) is about to expire, and I decide to use local images in the future, therefore, I wanted to download these images and convert the url links to local image limks.
The Obsidian local images plus plugin does the job really well: Sergei-Korneev/obsidian-local-images-plus
With one command, hundreds of images were downloaded and the related links updated:</description>
    </item>
    
    <item>
      <title>Microblaze2 Boot from QSPI Flash (No bootloader)</title>
      <link>qygong17.github.io/posts/microblaze2-boot-from-qspi-flash-no-bootloader/</link>
      <pubDate>Sun, 21 May 2023 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/posts/microblaze2-boot-from-qspi-flash-no-bootloader/</guid>
      <description>Flash Configuration for a MicroBlaze project running only in BRAM and without a bootloader.</description>
    </item>
    
    <item>
      <title>Microblaze1 Hello World LED</title>
      <link>qygong17.github.io/posts/microblaze1-hello-world-led/</link>
      <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/posts/microblaze1-hello-world-led/</guid>
      <description>1 Introduction This post is a step-by-step guide implementing a blinking LED project with MicroBlaze:
Create a minimal MicroBlaze project Sample code for blinking LED (based on a Xilinx demo) Implementation on the demo board I am new to FPGA and MicroBlaze, and I learned these all from the tutorials I found. References are at the end.
I used:
Device: xc7a35tfgg484-2, (an Artix-7 Mini board made by a Chinese company, Wildfire) Vivado 2018.</description>
    </item>
    
    <item>
      <title>Python script for publishing blog posts from Obsidian</title>
      <link>qygong17.github.io/posts/python-script-for-publishing-blog-posts-from-obsidian/</link>
      <pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/posts/python-script-for-publishing-blog-posts-from-obsidian/</guid>
      <description>A simple script</description>
    </item>
    
    <item>
      <title>PMSG0 background and learning resources</title>
      <link>qygong17.github.io/posts/pmsg/pmsg0-background/</link>
      <pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/posts/pmsg/pmsg0-background/</guid>
      <description>As I say background, it is actually a learning background of myself, not necessarily that of the PMSG.</description>
    </item>
    
    <item>
      <title>PMSG1 model in abc reference frame</title>
      <link>qygong17.github.io/posts/pmsg/pmsg1-abc-model/</link>
      <pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/posts/pmsg/pmsg1-abc-model/</guid>
      <description>Brief introduction of operation and equations in abc reference frame.</description>
    </item>
    
    <item>
      <title>双拼输入法体验记录</title>
      <link>qygong17.github.io/posts/shuang-pin/</link>
      <pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/posts/shuang-pin/</guid>
      <description>背景 主要是记录一下使用双拼的体验和学习过程，以此为例，多体验一些有趣、可能会有帮助的东西。
输入法：搜狗输入法+小鹤双拼的键位，因为感觉小鹤比较常用？另外，IOS里面也一样可以用小鹤。
学习双拼的主要原因其实就是为了玩（目前看来用处的确不是特别大）：
玩 学习一点新技能，毕竟以前只会全拼，试试有没有其他的方案（不敢学五笔。。） 一点点反应力锻炼 可能以后可以提升打字速度？——不过目前看效果不明显（毕竟全拼快的时候可以120wpm，现在双拼用了三周，大概在50-60wpm左右，只有一半，不过日常够用了） 心得体会 一部分情况下，和全拼没有区别，比如，打“比如”这类词——这也是双拼比较容易学的一个原因。 需要记忆的键位其实只有十几个，使用大约一两天以后，就基本不会忘了（虽然可能需要比较长的时间才能反应过来）。 有一些词，的确不如超级简拼方便，比如一些成语，用全拼的时候，打几个首字母就出来了。 尽量不要打开“双拼+全拼”功能，虽然可能在学习初期会比较方便，但可能会影响双拼的学习，毕竟打开这个功能以后，有些词的拼法就不太一样了。 按键次数明显变少了，毕竟，ang-H，uang-L等等，这些映射还是很方便的。少按好几个键。所以理论上我可以打得更快？ 在手机上用双拼感觉特别方便。手机的问题就是键盘太小，用双拼可以减少按错的次数。（而且用的是IOS自带的垃圾输入法，用双拼减少按键的同时，还能多给点信息，挺好的） 体验只用双拼三周以后，其实日常使用已经没有问题了，后面就看进一步熟悉以后，能不能继续提高了。总得来说还是一次比较有意思、也有用的尝试。 有人说学双拼会影响英文输入：我没体会到，毕竟是两个完全不同的输入系统，没有什么干涉。而且我也没忘记键盘每个键的位置，只是用双拼时，某些键有了一些特殊含义。 使用记录 2022.11.28 初次使用。直接上手觉得人都傻了。暂时先搜狗输入法，开着双拼+全拼用着。 2022.11.29 关闭了全拼：刚才拼“所”字，打不出来，差点以为记错了，结果发现是因为开了全拼，so也会出现“搜” 2022.12.1 基本上是每个词卡一下的状态。但是的确不用再看键位表了。 2022.12.2 大概每分钟40词 2022.12.7 还是和几天前差不多，基本上是每个词需要想一想才能打出来。有时候还是会错。 2022.12.10 一两个词，可以打得比较连贯。但是词一多，对于一个短句，还是需要想一想。 2022.12.11 偶尔错词，主要集中在C、D、V、U、I这些比较难记的键位上，但是还可接受。总得来说还是值得体验的，特别是在手机上，和单手打字的情况。 2022.12.18 三周以后，其实日常使用已经没有问题了 2023.5.15 看到之前的记录，发现已经持续用双拼大半年了。总得来说是值得学习一下的，这段时间没用过全拼。缺点可能就是，现在全拼不太熟练了吧。 </description>
    </item>
    
    <item>
      <title>你真的需要“第二大脑”笔记系统吗？Obsidian/Notion/Roam/Logseq等等</title>
      <link>qygong17.github.io/posts/thoughts-on-second-brain/</link>
      <pubDate>Sun, 14 May 2023 22:55:24 +0800</pubDate>
      
      <guid>qygong17.github.io/posts/thoughts-on-second-brain/</guid>
      <description>结论是，不一定需要，但是这些工具却很容易被当做是“刚需”。新的工具有自己的学习曲线，这些学习时间，不如用来做一些其他事情（使用顺手的工具即可）。
原视频：Stop Procrastinating With Note-Taking Apps Like Obsidian, Roam, Logseq 是对所谓“第二大脑”的各种笔记软件和相对应的各种“高级拖延技术”的一些反思。 这是我基于问题-论据-结论，对视频内容的整理。并且，因为原视频是英文，在写作过程中，肯定有一些paraphrase。
这里的“工作”，是广义的工作，可以是自己一直想做的事情，比如写一篇文章。 这里的“PKM”，是个人知识管理（personal knowledge management）。可以是一个系统，也可以具体到使用某个软件来做笔记。 部分不在视频里的内容，做了说明。 优化PKM是工作吗？ 大部分情况，不是。
PKM没有输出，只是一个辅助系统 优化PKM和笔记软件，让我们看起来很厉害很聪明，是一种高级的拖延方法，让我们在没开始工作时就获得了一种“已完成”的感觉，类似： 一直在做学习前的各种准备工作 做很复杂（并且没必要）的计划， 看很多方法学相关的书。 一直和人讨论自己的想法，从来不开始做 博主自己的经历和感受 一开始觉得双链笔记看起来好高级，用了以后感觉自己都变聪明了 但是发现输出的东西、所做的工作、以及自己实际上其实并没有显得更聪明——这只是一种“变聪明的错觉” 看起来是在做准备工作，但是从结果来看，其实和看Netflix、打游戏没什么区别 好的PKM是开始工作的前提吗？ 大部分人会否认，但是潜意识里又掉进了这个“优化PKM”的陷阱。
陷入添加、优化新功能，换新的工具的无底洞中 一直在换新工具，期待有一个革命性的工具来完全改变自己的工作 一直在优化自己的工具，看教程，学各种复杂操作（Obsidian的一大堆插件其实也挺像个陷阱） 以为做了这个优化、用了这个工具，我的效率就会突然提高两倍——实际上并不会 工作过程中，都会有不确定性、混乱、无奈，不可能先把做事情的系统调整到完美，再开始做事情。 collector&amp;rsquo;s fallacy: 收集的信息本身并没有用，而是要看我们基于这些信息，输出了什么。 没有一个完美的系统，对于现有的笔记软件，总有一个新软件比旧软件在某个方面好那么一点点。而追逐这么一点点效率（比如，在Obsidian里基于双链打开相关的笔记，和在一个文件夹里根据文件名搜一个word文档），不是在工作。 好的PKM系统可以提高效率，但是并不能代替努力工作。 怎样不落入这个陷阱？ 使用不完美的系统持续工作和输出——所有系统都不可能是完美的。
意识到优化PKM不是工作： 如果潜意识认为PKM是在工作，你就可能会花大量的时间来优化这个系统。 博主自己也换了不少的笔记工具，觉得这些切换工具花费的时间应该被用来做实际的工作。 我感觉自己也花了太多时间在上面，（其实，很多Obsidian教程我都看不懂。。。） 用自己顺手的工具，高效地工作。（Good enough） 锻炼肌肉需要一定的锻炼和饮食，而不是一个最佳的锻炼计划。 作家的成果： 有优秀PKM系统的作家，可以高效写作； 持续写作的作家，可能效率不高，但也能出成果； 而一直在拖延、优化PKM、做笔记的作家，实际上什么都没做。 在看到新的工具和PKM系统时，问自己： 真的需要这些新的功能吗？ 真的有必要切换工具吗？ 我自己昨天的经历（这也不是视频里的）：拍了个视频，想要截取其中的部分画面，再转成gif，放到博文里去（FPGA: Verilog LED呼吸灯_Fantasy237的博客），但是以前没做过这种操作，刚准备搜个软件来学一下——想到，在播放视频时，用录屏软件截屏就好了，不需要什么新的软件。 想一想一些例子： 博主的一个朋友，用Evernote和Word，创业做得不错。 博主的另一个朋友，只用纸笔，也写出了优秀的作品。 以前都没有电脑，还是有人能做出影响世界的东西。 一些建议 用一个系统或一个笔记软件，坚持半年以上，最好是正在使用的——不需要更厉害的新工具。 相信自己的能力和思考，比依赖所谓“第二大脑”更重要。——不要害怕因为没做某个笔记，就错过了什么重要的东西。保持阅读和输出。 基于一些项目——比如要写的一篇博文——来做笔记。因为值得记录的东西是无穷无尽的，需要加以筛选。 优先完成工作和提升所需的能力，而不是一直去调整做笔记的方法或者PKM系统。 设置一些限制，比如，只在周日花2小时优化PKM系统，其他时间只基于现有的系统去完成工作。（比如我现在这样） 用Epictetus的一段话作为结束（这是我突然想起来的，不是视频里的）：</description>
    </item>
    
    <item>
      <title>Test math, figure, tags, toc</title>
      <link>qygong17.github.io/posts/test-figure-and-math/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/posts/test-figure-and-math/</guid>
      <description>Math Typeset math from: Writing math with Hugo | Misha Brukman
test inline: $\psi_{rq} =L_ri_{rq}- \frac{L_{M}^{2}}{L_{s}}i_{rq}$
test align: use 3 backslashes \\\ instead of 2 \\, it works, but is odd&amp;hellip;
$$ \begin{aligned} u_{rd} &amp;amp;= R_ri_{rd}+ \sigma L_{r}\frac{d i_{rd}}{dt}-\omega_{s1}\sigma L_{r}i_{rq}+ \left(\frac{L_{M}}{L_{s}}\frac{d}{dt}\psi_{s}\approx 0 \right)\\\ u_{rq} &amp;amp;= R_ri_{rq}+\sigma L_{r}\frac{d i_{rq}}{dt}+\omega_{s1}\sigma L_{r}i_{rd}+\omega_{s1}\frac{L_{M}}{L_{s}} \psi_s \end{aligned} $$
Figure A figure from my oss, Markdown syntax ![](myoss.com/1.png) works: A local figure, ![](/images/test_image.png), while the actual image file is in \static\images: Use local image and tips: Rendering Images in Markdown Preview of Hugo Site | Mike F.</description>
    </item>
    
    <item>
      <title>关于我为什么写博客</title>
      <link>qygong17.github.io/posts/why-blogging/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/posts/why-blogging/</guid>
      <description>搜索：Why blogging，总是能看到和business相关的内容，比如，写博客可以帮助提升网站的人气等等。像下面这个，十几条理由中，大部分都是和推广、商业相关： Why Blog? 14 Benefits of Blogging (in 2023) (wpbeginner.com)。
但是这些和我想的有一定距离。
关于我为什么写博客 主要还是保持每天写东西，虽然不是所有写的东西都会发布：
首先是记录：有一个想法想要记录-&amp;gt;感觉可以拓展一下-&amp;gt;花点时间写出来发布。 然后写作也是一个整理思路的过程。比如之前学电机，看了一些书和教程，似乎懂了，开始写的时候，发现又只能查资料。“大致懂了”，和能清楚（至少自认为清楚）地描述出来，还是不同的。（费曼学习法：How to Learn Faster with the Feynman Technique (Example Included)） 我想练习英文写作，不仅仅是写技术相关的文章。 如果有人问起某个问题，然后我正好写过，我把对应的博文链接发给ta，很高兴又帮助了一个人。 最后，如果能帮助到另外的几个人，就更好了。 关于CSDN的博客 一年多以前在CSDN写了第一篇博客，记得是介绍一个元器件和仿真工具的使用。一年以后，逐渐发现，对于CSDN博客的形式不是太满意。这里面有自己的因素，也有这个站点的因素。比如：
看每天新增了多少粉丝、收藏或访问 看大家都看了哪些热门的文章 各个角落里的广告，基本上不相关的“相关推荐” 写东西的时候总想着“这是不是一篇好的文章”——但对于“好”，其实是很难定义的，比如有价值、对别人有帮助、对自己有帮助、能吸引读者等。 CSDN还是一个技术领域的站点，有些奇奇怪怪的内容，不太想放在这里。 首页显示的一串数据，很容易让人感觉，这是一个博客“好不好”的评价标准。有时候我就经常盯着这几个数字看，这让我觉得不是一个好的状态，当然我也可以不盯着它们看，但是In my defense, they were staring at me。 In my defense, they were staring at me By the way, How I Met Your Mother is a good show.
这些数字，和商业相关的东西，就会导致这样的文章和标题（当然我没看文章内容，也不是说这篇文章或者作者不“好”，只是说，不符合我对自己博客的一些想法）：如何写出一篇爆款文章？【CSDN攻略】创作技巧篇
但是这些在CSDN或者大部分其他博客中，是不能修改的，所以就想着换个自建的博客。正好想起98里面有这个帖子，照着学了一下，看起来也还不错。
而且，我不想每次发东西都有人审核（虽然从来没审核失败过）。所以我开了这个新的博客，里面只有内容和一些标签。没有访问次数，没有粉丝，甚至没有留言功能（当然主要还是因为我根本不懂怎么做网站）。
以前我会在博客首页简介里写，“硬件工程师”，但是后来删掉了，因为我不想限制自己，当然不是说我不想做硬件工程师，只是，说不定，我也可以写一个读书笔记的博客，或者是介绍自己用过的一些小工具。后来我想，我可以主要是硬件工程师，然后同时又有很多不同的方面。
当然，没有了这些数据，似乎就没有了成就感，但其实也无所谓。这篇文章是在看youtube时候想到的。以每年读书的数量去评价“好的读者”，和以阅读数、粉丝数来评价“好的博客”，似乎有类似之处。 Don&amp;rsquo;t Worry about Reading More Books.</description>
    </item>
    
    <item>
      <title>使用Zettelkasten方法做笔记</title>
      <link>qygong17.github.io/posts/learn_zettelkasten_blog/</link>
      <pubDate>Sat, 13 May 2023 18:08:24 +0800</pubDate>
      
      <guid>qygong17.github.io/posts/learn_zettelkasten_blog/</guid>
      <description>使用Zettelkasten方法做笔记 最近总看到Zettelkasten方法，看了一些视频和文章，主要看下怎么操作、从这个方法中可以学到什么。
背景之类不再重复。主要记录操作方法等。
Zettelkasten方法 接收信息：书、文章、视频、播客等 记笔记 为哪些内容做笔记： 有些人说，大部分感兴趣的东西都可以记下来 自己的一些想法 笔记里有什么 记录：尽量做到只看自己的记录就能理解这个笔记的内容，而不需要再去看之前的原文 来源：记录这个笔记来自哪里，备用。 标志：便于引用（数字化的笔记中，这是挺容易的，比如使用文件名+日期） 和其他笔记的关系：见 处理笔记 处理笔记 整理： 之前记录的笔记中，有些是临时的一些想法，有些结构比较混乱， How To Take Smart Notes (3 methods no one&amp;rsquo;s talking about) 2023 Zettelkasten Obsidian Workflow ⚡️ Simple Set Up - YouTube 目标： 完整地解释一个最小的内容（atomic note） 用自己的话 建立新的笔记与现有笔记之间的关系——在我看来也是一个学习的过程，逐渐深入或者拓展。 另外一些操作：添加对应的标签等等。 写作 需要时刻记得，做笔记是为了什么，比如，变成自己的思考、转换成文章、视频、用于项目等 如果不输出，最后得到的也只是一堆双链笔记。 可以先列一个大纲-&amp;gt;把之前的相关的笔记填进去。然后再基于这个大纲，再完成最终的作品 但注意，这一步可能还是需要花很多的时间 Zettelkasten可以提升写作效率，但并不能代替最终的写作。 一些想法 坚持记录和写作，相信这个过程。Trust the Process 坚持用自己的话来描述——是在练习写作，同时也有助于加深理解。 Zettelkasten也可以用在工科的学术写作，比如这篇文章：Field Report #1: A PhD About Writing with His Zettelkasten • Zettelkasten Method。印象最深的是： 新的想法还是来自阅读和与人交流，而不是来自 Zettelkasten本身，但是Zettelkasten能帮助建立现有想法之间的联系。 一些想法和观点是通用的，不应被限制在某个项目中。——Luhmann’s Zettelkasten其实只有2个文件夹：文献、想法。 虽然基于 Zettelkasten笔记能快速建立一个大纲，最终的整理和写作还是困难的。 最后，不要花太多时间在工具或系统上：你真的需要“第二大脑”笔记系统吗？Obsidian/Notion/Roam/Logseq等等 另外一些资料 推荐这个视频，5分钟左右把关键信息描述清楚：Zettelkasten Note-Taking Method: Simply Explained - YouTube 另外，有这个网站：Getting Started • Zettelkasten Method 这是翻译（粗粗一看，可能是机翻）：Zettelkasten方法简介 - 知乎 (zhihu.</description>
    </item>
    
    <item>
      <title>Obsidian templater日记模板添加一个随机问题和Templater Javascript</title>
      <link>qygong17.github.io/posts/random-questions-for-my-daily-notes/</link>
      <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/posts/random-questions-for-my-daily-notes/</guid>
      <description>简介 每天日记里写同样的东西，感觉有点无聊，想问自己一些问题，每天不同。
查到有插件random structural diary，我想要的功能就是这样，但是没懂这个插件怎么放进template。
想要的功能很简单，所以自己写一个：新建一个日记时，从一个自己设定的问题列表中选择一个，打印在日记中。
写一个简单的脚本 randomDailyQuestion.js:
1 2 3 4 5 6 7 8 9 10 11 12 function randomDailyQuestion() { let myQuestionArray = []; myQuestionArray.push(&amp;#34;Question apple&amp;#34;); myQuestionArray.push(&amp;#34;Question banana&amp;#34;); myQuestionArray.push(&amp;#34;Question orange&amp;#34;); let randomIndex = Math.floor(Math.random() * myQuestionArray.length); let randomQuestion = myQuestionArray[randomIndex]; return randomQuestion; } module.exports = randomDailyQuestion （语法全问GPT，比自己搜快多了） Templater设置 设置存放程序的目录：
加入template 在对应的template代码中加入刚才的脚本，比如这里是在日期下面加了这个问题：
# &amp;lt;% tp.date.now(&amp;#34;dddd MMMM Do YYYY&amp;#34;) %&amp;gt;&amp;lt;% tp.user.randomDailyQuestion(tp) %&amp;gt; 最终结果 上面两行显示为： 每次会打印其中一个问题。
警告 注意，个人知识管理（personal knowledge management, PKM）并不等于实际的工作（除非你是这方面的博主）。不要花大量时间在这些花里胡哨的东西上面。去干活！！！</description>
    </item>
    
    <item>
      <title>FPGA LED呼吸灯</title>
      <link>qygong17.github.io/posts/pwm-dimming-led/</link>
      <pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/posts/pwm-dimming-led/</guid>
      <description>FPGA Verilog简单的LED呼吸灯，作为新板子的亮灯程序。
这个LED在输出高电平时点亮。 主要的想法：
CMP_MAX限制最大占空比，因为发现在占空比较大时，改变占空比时，亮度变化不大，效果不明显。 PWM_CNT_MAX设置PWM频率 DUTY_CNT_MAX设置占空比变化的频率 CMP_STEP设置每次占空比变化的步长，通过改变CMP_STEP来改变呼吸灯的频率 flag_duty_increase指示占空比变化的方向 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 module pwm_led ( input clk, input reset_n, output led ); parameter PWM_CNT_MAX = 32&amp;#39;d50_000; //PWM frequency 50M/5e4=1kHz parameter CMP_MAX = 32&amp;#39;d25_000; //max duty ratio CMP_MAX/PWM_CNT_MAX=0.</description>
    </item>
    
    <item>
      <title>A record of what I did to my blog</title>
      <link>qygong17.github.io/posts/a-record-of-what-i-did-to-my-blog/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/posts/a-record-of-what-i-did-to-my-blog/</guid>
      <description>Since I don&amp;rsquo;t know the first thing about web design, all of the modifications are from Google or other bloggers. The source will be included. Thanks in advance.
2023-05-15 Organizing content I planned a few blog posts for the basic modelling and control of PMSG. I wanted to put all the relevant posts into a folder, such as content/post/PMSG.
Documentation: Content Organization | Hugo (gohugo.io) Demo: hugo-PaperMod/content/posts/papermod Source of the demo: PaperMod (adityatelange.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>qygong17.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>qygong17.github.io/about/</guid>
      <description>About</description>
    </item>
    
    
    
  </channel>
</rss>
